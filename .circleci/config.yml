version: 2
jobs:
  spelling:
    docker:
    - image: mozilla/markdown-spellcheck
    steps:
    - checkout
    - run:
        name: Spell Check
        command: mdspell --ignore-numbers --en-us --report '**/*.md'

  doctoc:
    docker:
    - image: node:8.10.0
    steps:
      - checkout
      - run:
          name: Ensure markdown tables of contents are up to date
          command: ./.circleci/doctoc-check.sh

  format-python:
    docker:
    - image: python
    steps:
      - checkout
      - run:
          name: Install black
          command: pip install black
      - run:
          name: Ensure ingestion-edge is formatted by black
          command: black --check --diff ingestion-edge

  ingestion-edge-build:
    docker:
    - image: docker:18.02.0-ce
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Create version.json
        command: >-
          printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n'
          "$CIRCLE_SHA1"
          "${CIRCLE_TAG-latest}"
          "$CIRCLE_PROJECT_USERNAME"
          "$CIRCLE_PROJECT_REPONAME"
          "$CIRCLE_BUILD_URL"
          > ingestion-edge/version.json
    - run:
        name: Build Docker image
        command: docker build -t app:build ingestion-edge

    # save the built docker container into CircleCI's cache. This is
    # required since Workflows do not have the same remote docker instance.
    - run:
        name: docker save app:build
        command: mkdir -p /cache; docker save -o /cache/docker.tar "app:build"
    - save_cache:
        key: v1-{{ .Branch }}-{{epoch}}
        paths:
          - /cache/docker.tar

  ingestion-edge-test:
    docker:
    - image: docker/compose:1.22.0
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - restore_cache:
        key: v1-{{.Branch}}
    - run:
        name: Restore Docker image cache
        command: docker load -i /cache/docker.tar

    - run:
        name: Docker Compose Test
        command: >-
          docker-compose
          up
          --build
          --exit-code-from test
          --force-recreate
          --quiet-pull
        environment:
          COMPOSE_FILE: ingestion-edge/docker-compose.yml
          COMPOSE_PROJECT_NAME: circleci-ingestion-edge

  ingestion-edge-deploy:
    docker:
    - image: docker:18.02.0-ce
    steps:
    - setup_remote_docker
    - restore_cache:
        key: v1-{{.Branch}}
    - run:
        name: Restore Docker image cache
        command: docker load -i /cache/docker.tar

    - run:
        name: Deploy to Dockerhub
        command: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          # deploy master
          if [ "${CIRCLE_BRANCH}" == "master" ]; then
            docker tag app:build ${DOCKERHUB_REPO}:latest
            docker push ${DOCKERHUB_REPO}:latest
          elif  [ ! -z "${CIRCLE_TAG}" ]; then
          # deploy a release tag...
            echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            docker tag app:build "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            docker images
            docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
          fi

  ingestion-beam:
    docker:
    - image: maven
    steps:
    - checkout
    - restore_cache:
        keys:
          # when lock file changes, use increasingly general patterns to restore cache
          # https://circleci.com/docs/2.0/caching/#maven-java-and-leiningen-clojure
          - maven-repo-v1-{{ .Branch }}-{{ checksum "ingestion-beam/pom.xml" }}
          - maven-repo-v1-{{ .Branch }}-
          - maven-repo-v1-
    - run:
        name: Download Geolite2
        command: ingestion-beam/bin/download-geolite2
    - run:
        name: Maven Test
        command: cd ingestion-beam && mvn clean test
    - save_cache:
        paths:
          - ~/.m2
        key: maven-repo-v1-{{ .Branch }}-{{ checksum "ingestion-beam/pom.xml" }}

workflows:
  version: 2
  build:
    jobs:
    - spelling
    - doctoc
    - format-python
    - ingestion-edge-build:
        filters:
          tags:
            only: /.*/
    - ingestion-edge-test:
        requires:
          - ingestion-edge-build
        filters:
          tags:
            only: /.*/
    - ingestion-edge-deploy:
        requires:
          - ingestion-edge-build
          - ingestion-edge-test
        filters:
          tags:
            only: /.*/
          branches:
            only: master
    - ingestion-beam
