version: 2.1
executors:
  java-11:
    docker:
    - image: maven:3-jdk-11
    environment:
      # To compile for a different java runtime, provide a value like "-Dmaven.compiler.release=14"
      JAVA_COMPILER_RELEASE_FLAG: "" # 11 is the default
jobs:
  spelling:
    docker:
    - image: node:alpine
    steps:
    - checkout
    - run:
        name: Install mdspell
        command: npm install markdown-spellcheck
    - run:
        name: Spell Check
        command: npx mdspell --ignore-numbers --en-us --report '**/*.md' '!node_modules/**/*.md'

  prettier:
    docker:
    - image: node:alpine
    steps:
    - checkout
    - run:
        name: Install prettier
        command: npm install prettier
    - run:
        name: Check markdown is formatted with prettier
        command: npx prettier -c '**/*.md'

  docs:
    docker:
    - image: circleci/python:3.10
    steps:
    - checkout
    - run:
        name: Install dependencies
        command: |
          sudo pip install \
            mkdocs \
            mkdocs-material \
            markdown-include \
            mkdocs-awesome-pages-plugin
    - add_ssh_keys:
        fingerprints:
        - "1e:fb:d5:8d:d5:16:bd:3e:c3:e6:19:cf:20:01:1c:ad"
    - run:
        name: Build and deploy docs
        command: |
          mkdocs gh-deploy -m "[ci skip] Deployed {sha} with MkDocs version: {version}"

  ingestion-edge: &edge
    working_directory: /root/project/ingestion-edge
    docker:
    - image: python:3.10
    steps:
    - &checkout
      checkout:
        path: /root/project
    - &skip_unmodified
      run:
        name: Early return when dir not modified
        command: |
          if [ "$CIRCLE_BRANCH" = main ]; then
              echo "Run tests because branch is main"
          elif git log --format=%B --no-merges -n 1 | grep -qF '[run-tests]'; then
              echo "Run tests because [run-tests] in commit message"
          elif ! git diff --quiet origin/main -- "$(git rev-parse --show-toplevel)"/.circleci; then
              echo "Run tests because .circleci/ was modified since branching off main"
          elif test -f pom.xml && ! git diff --quiet origin/main -- "$(git rev-parse --show-toplevel)"/pom.xml; then
              echo "Run tests because pom.xml was modified since branching off main"
          elif test -f pom.xml && ! git diff --quiet origin/main -- "$(git rev-parse --show-toplevel)"/ingestion-core/src; then
              echo "Run tests because ingestion-core/src was modified since branching off main"
          elif ! git diff --quiet origin/main... -- .; then
              echo "Run tests because $(git rev-parse --show-prefix) was modified since branching off main"
          else
              echo "Skipping tests because $(git rev-parse --show-prefix) was not modified"
              circleci step halt
          fi
    - restore_cache:
        keys:
          # when lock files change, use increasingly general patterns to restore cache
          - &cache_key_edge
            python-3.10-packages-v1-{{ .Branch }}-{{ checksum "requirements.in" }}-{{ checksum "requirements.txt" }}
          - python-3.10-packages-v1-{{ .Branch }}-{{ checksum "requirements.in" }}-
          - python-3.10-packages-v1-{{ .Branch }}-
          - python-3.10-packages-v1-
    - run:
        name: Build
        command: bin/build
    - run:
        name: PyTest with linters
        command: bin/pytest-all
        environment:
          PYTEST_ADDOPTS: --cov-report=xml
    - store_test_results:
        path: test-results
    - &report_code_coverage
      run:
        name: Report code coverage
        command: |
          curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
          curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
          gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
          shasum -a 256 -c codecov.SHA256SUM
          chmod +x codecov
          ./codecov -F "$(basename $PWD | sed s/[^a-z]/_/g)"
    - save_cache:
        paths:
        - ingestion-edge/venv/
        key: *cache_key_edge

  ingestion-edge-verify-requirements:
    <<: *edge
    steps:
      - *checkout
      - run:
          name: Verify that requirements.txt contains the right dependencies for this python version
          # use `--constraint` with `requirements.in` not `requirements.txt`
          # because as of pip>=20.3 "Constraints are only allowed to take the
          # form of a package name and a version specifier"
          command: |
            pip install pip-tools --constraint requirements.in
            pip-compile --allow-unsafe --generate-hashes --quiet
            git diff --exit-code -G '^ *[^# ]' -- requirements.txt

  ingestion-edge-release:
    working_directory: /root/project/ingestion-edge
    docker:
    - image: docker/compose:1.22.0
    steps:
    - *checkout
    - &setup_remote_docker
      setup_remote_docker:
        docker_layer_caching: true
        version: default
    - &create_version_json
      run:
        name: Create version.json
        command: >-
          printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n'
          "$CIRCLE_SHA1"
          "${CIRCLE_TAG-latest}"
          "$CIRCLE_PROJECT_USERNAME"
          "$CIRCLE_PROJECT_REPONAME"
          "$CIRCLE_BUILD_URL"
          > version.json
    - &persist_ci_env
      run:
        name: Persist CI environment file for passing into docker containers
        command: env | grep '^CI' > circleci.env
    - run: &docker_compose_test
        name: Docker Compose Test
        command: >-
          docker-compose
          up
          --build
          --abort-on-container-exit
          --force-recreate
          --quiet-pull
        environment: &edge_compose_env
          COMPOSE_FILE: docker-compose.yml:docker-compose.circleci.yml
          COMPOSE_PROJECT_NAME: circleci-ingestion-edge
    - run:
        name: Deploy to Dockerhub
        command: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker-compose push web
        environment: *edge_compose_env

  maven:
    parameters:
      executor:
        type: executor
      module:
        type: enum
        enum: [ingestion-beam, ingestion-core, ingestion-sink]
      scope:
        type: enum
        enum: [unit, integration]
    working_directory: /root/project/<< parameters.module >>
    executor: << parameters.executor >>
    steps:
    - *checkout
    - *skip_unmodified
    - restore_cache:
        keys:
          # when lock file changes, use increasingly general patterns to restore cache
          # https://circleci.com/docs/2.0/caching/#maven-java-and-leiningen-clojure
          - &cache_key
            maven-repo-v1-<< parameters.module >>-{{ .Branch }}-{{ checksum "../pom.xml" }}-{{ checksum "../ingestion-core/pom.xml" }}-{{ checksum "pom.xml" }}
          - maven-repo-v1-<< parameters.module >>-{{ .Branch }}-{{ checksum "../pom.xml" }}-{{ checksum "../ingestion-core/pom.xml" }}-
          - maven-repo-v1-<< parameters.module >>-{{ .Branch }}-{{ checksum "../pom.xml" }}-
          - maven-repo-v1-<< parameters.module >>-{{ .Branch }}-
          - maven-repo-v1-<< parameters.module >>-main-
    - when:
        # This when condition only shows this step for integration tests, but still checks
        # $CIRCLE_PR_NUMBER at runtime because there is no equivalent pipeline value
        # https://circleci.com/docs/2.0/pipeline-variables/#pipeline-values
        condition:
          equal: [integration, << parameters.scope >>]
        steps:
          - run:
              name: Early return if this build is from a forked PR
              command: |
                if [ -n "$CIRCLE_PR_NUMBER" ]; then
                  echo "Cannot pass creds to forked PRs, so marking this step successful"
                  circleci step halt
                fi
    - when:
        condition:
          equal: [ingestion-beam, << parameters.module >>]
        steps:
          - run:
              name: Download resources needed for Beam tests
              command: |
                bin/download-schemas
    - run:
        name: Maven << parameters.scope >> test
        # Google's client libraries will check for GOOGLE_APPLICATION_CREDENTIALS
        # and use a file in that location for credentials if present;
        # See https://cloud.google.com/docs/authentication/production
        command: |
          if [ "integration" = "<< parameters.scope >>" ]; then
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp.json"
            echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
            SCOPE_FLAGS="-Dtest=*IntegrationTest -Dsurefire.failIfNoSpecifiedTests=false"
          else
            SCOPE_FLAGS=
          fi
          set -x
          mvn clean test $JAVA_COMPILER_RELEASE_FLAG $SCOPE_FLAGS
    - store_test_results:
        path: target/surefire-reports
    - *report_code_coverage
    - when:
        condition:
          equal: [unit, << parameters.scope >>]
        steps:
          - save_cache:
              paths:
                - ~/.m2
              key: *cache_key

  ingestion-sink-release:
    working_directory: /root/project/ingestion-sink
    docker:
    - image: docker/compose:1.22.0
    steps:
      - *setup_remote_docker
      - *checkout
      - *create_version_json
      - *persist_ci_env
      - run:
          <<: *docker_compose_test
          environment: &sink_compose_env
            <<: *edge_compose_env
            COMPOSE_PROJECT_NAME: circleci-ingestion-sink
      - run:
          name: Deploy to Dockerhub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker-compose push sink
          environment: *sink_compose_env

workflows:
  version: 2
  build:
    jobs:
    - spelling
    - prettier
    - docs:
        filters:
          branches:
            only: main
    - ingestion-edge
    - ingestion-edge-verify-requirements
    - ingestion-edge-release:
        filters:
          branches:
            only: main
          tags:
            only: /.*/
    - maven: &java_matrix
        # Use human readable job names, like:
        #  ingestion-sink-unit-java-11
        #  and ingestion-beam-integration-java-11
        name: << matrix.module >>-<< matrix.scope >>-<< matrix.executor >>
        matrix:
          parameters:
            executor: [java-11]
            module: [ingestion-beam, ingestion-core, ingestion-sink]
            scope: [unit, integration]
    - ingestion-sink-release:
        filters:
          branches:
            only: main
          tags:
            only: /.*/
